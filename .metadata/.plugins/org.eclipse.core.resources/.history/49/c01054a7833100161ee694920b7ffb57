package com.cn.ibm.miniist.tingtingtang.services;

import java.util.HashMap;
import java.util.Map;

import org.bson.BSONObject;
import org.bson.types.ObjectId;

import com.cn.ibm.miniist.tingtingtang.entities.MachineInfo;
import com.cn.ibm.miniist.tingtingtang.helper.MongoDBHelper;
import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;

public class MachineInfoService
{
	private static DB db;
	private static MongoDBHelper dbhelper = new MongoDBHelper();
	
	//Insert a new machine into mongodb (need to add boolean to verify the new machine name is available or not)
	public Boolean createNewMachine(MachineInfo machineInfo, String collName)
	{
		//String dbname = "test";
		
		db = dbhelper.getDB();
			DBCollection collection = db.getCollection(collName);
			
			BasicDBObject findBymName = new BasicDBObject();
			findBymName.put("mName", machineInfo.getMachineName());
			
			DBCursor cursor = collection.find(findBymName);
			if(!cursor.hasNext())
			{				
				collection.createIndex(new BasicDBObject("mName", 1));	
				BasicDBObject doc = new BasicDBObject("mName", machineInfo.getMachineName())
						.append("hostName", machineInfo.getHostName())
						.append("ipAddress", machineInfo.getIpAdd())
						.append("description", machineInfo.getDes())
						.append("createTime", machineInfo.getCreateTime())
					    .append("updateTime", machineInfo.getUpdateTime());
						
				collection.insert(doc);	
				return true;
			}
			else
			{
				return false;
			}
	}
	
	// Find the required machine info using the unique machine name
	public MachineInfo findMachine(String mName, String collName)
	{
		DBCollection collection;
		db = dbhelper.getDB();
		if (db.collectionExists(collName))
		{
			collection = db.getCollection(collName);
			BasicDBObject findBymName = new BasicDBObject();
			findBymName.put("mName", mName);
			
			DBCursor cursor = collection.find(findBymName);
			Map<String, Object> mMap = new HashMap<String, Object>();
			MachineInfo machineInfo = new MachineInfo();
			while(cursor.hasNext())
			{
				mMap = cursor.next().toMap();
			}			
			machineInfo.setMachineName(mName);
			machineInfo.setHostName(mMap.get("hostName").toString());
			machineInfo.setIpAdd(mMap.get("ipAddress").toString());
			machineInfo.setDes(mMap.get("description").toString());
			machineInfo.setCreateTime(mMap.get("createTime").toString());
			machineInfo.setUpdateTime(mMap.get("updateTime").toString());
			machineInfo.setId(mMap.get("_id").toString());
			
			return machineInfo;
		}
		else
		{
			return null;
		}
	}
	
	//Update the corresponding machine info using the unique machine name
	public void updateMachine(String mName, MachineInfo machineInfo)
	{
		
	}
	
	//Delete the corresponding machine info in mongodb using the unique machine name
	public Boolean deleteMachine(String mName, String collName)
	{
		DBCollection collection;
		db = dbhelper.getDB();
		if(db.collectionExists(collName))
		{
			collection = db.getCollection(collName);
			BasicDBObject delMachine = new BasicDBObject();
			delMachine.put("mName", mName);
			collection.remove(delMachine);
			return true;
		}
		else
		{
			return false;
		}
	}
}
